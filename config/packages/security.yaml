security:
    encoders:
        App\Api\Entity\User: auto
        Symfony\Component\Security\Core\User\User: plaintext
    role_hierarchy:
        ROLE_ADMIN:         ROLE_USER
        ROLE_SUPER_ADMIN:   ROLE_ADMIN

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users:
            entity:
                class: 'App\Api\Entity\User'
                manager_name: 'tenant'
#        chain_provider:
#            chain:
#                providers: [in_memory]
        in_memory:
            memory:
                users:
                    superadmin:
                        password: 'superadminpw'
                        roles: ['ROLE_SUPER_ADMIN']
#        fos_userbundle:
#            id: fos_user.user_provider.username

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/validate, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/, role: ROLE_ADMIN }

        - { path: ^/api/doc, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/auth/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/auth/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/uploads/$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

#        api_login:
#            pattern:  ^/login
#            stateless: true
#            anonymous: true
#            json_login:
#                provider: chain_provider
#                check_path:               /login
#                success_handler:          lexik_jwt_authentication.handler.authentication_success
#                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
#            provider: chain_provider

        api_register:
            pattern:  ^/register
            stateless: true
            anonymous: true

        api_doc:
            pattern:  ^/api/doc
            stateless: true
            anonymous: true

        api:
            pattern: ^/api
            stateless: true
            anonymous: false
            provider: users
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        main:
#            anonymous: true

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html
            pattern: ^/
#            form_login:
#                provider: chain_provider
#                csrf_token_generator: security.csrf.token_manager
#                login_path: fos_user_security_login
#                check_path: fos_user_security_check
#                always_use_default_target_path: false
#                default_target_path: admin_admin_index

#            logout:
#                path:   fos_user_security_logout
#                target: fos_user_security_login
#            logout:       true
            anonymous:    true